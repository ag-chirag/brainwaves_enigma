package com.example.qless;

import java.util.HashMap;

import zootr.matchup.cricket.R;
import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.Tracker;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.urbanairship.AirshipConfigOptions;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.push.PushManager;
import com.zootr.matchup.broadcast.IntentReceiver;
import com.zootr.matchup.utils.Utils;
public class MainApplication extends Application {

	/**
	 * @author Sheetal Suryan
	 */

	/**
	 * Enum used to identify the tracker that needs to be used for tracking.
	 *
	 * A single tracker is usually enough for most purposes. In case you do need multiple trackers,
	 * storing them all in Application object helps ensure that they are created only once per
	 * application instance.
	 */
	public enum TrackerName {
		APP_TRACKER, // Tracker used only in this app.
		GLOBAL_TRACKER, // Tracker used by all the apps from a company. eg: roll-up tracking.
		ECOMMERCE_TRACKER, // Tracker used by all ecommerce transactions from a company.
	}

	HashMap<TrackerName, Tracker> mTrackers = new HashMap<TrackerName, Tracker>();


	private static MainApplication instance;
	public MainApplication() {
		instance  =  this;
	}

	public static Context getContext() {
		return instance;
	}

	@Override
	public void onCreate() {


		super.onCreate();

		initPushNotification();

		initImageLoader(getApplicationContext());


	}

	public void initPushNotification() {
		try {

			SharedPreferences preferences = Utils.getPreferencesInstance(null);

			if(preferences.getBoolean("notification_enabled", true)){

				preferences.edit().putBoolean("notification_enabled", true).commit();

				AirshipConfigOptions options = AirshipConfigOptions.loadDefaultOptions(this);
				UAirship.takeOff(this, options);

				PushManager.enablePush();
				String apid = PushManager.shared().getAPID();
				Logger.info("My Application onCreate - App APID: " + apid);
				PushManager.shared().setIntentReceiver(IntentReceiver.class);

			}
		} catch (Exception e) {
			Log.e("MainApplication", "Exception AirshipConfigOptions error ",e);
		}

	}

	public static void initImageLoader(Context context) {
		try{
			ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)
			.threadPriority(Thread.NORM_PRIORITY - 2)
			.denyCacheImageMultipleSizesInMemory()
			.discCacheFileNameGenerator(new Md5FileNameGenerator())
			.tasksProcessingOrder(QueueProcessingType.FIFO)
			.writeDebugLogs() // Remove for release app
			.build();
			// Initialize ImageLoader with configuration.
			ImageLoader.getInstance().init(config);

		} catch (Exception e) {
			Log.w("MainApplication", "Exception ImageLoader error ",e);
		}
	}

	public static boolean isAppRunning() {
		return appRunning;
	}  

	public static void appStarting() {
		appRunning = true;
	}

	public static void appStop() {
		appRunning = false;
	}

	private static boolean appRunning;


	@Override
	public void onTerminate(){
		super.onTerminate();
	}

	public synchronized Tracker getTracker(TrackerName trackerId) {

		if (!mTrackers.containsKey(trackerId)) {

			GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);
			Tracker t = (trackerId == TrackerName.APP_TRACKER) ? analytics.newTracker(getResources().getString(R.string.google_analatic_id))
					: (trackerId == TrackerName.GLOBAL_TRACKER) ? analytics.newTracker(R.xml.global_tracker)
							: analytics.newTracker(R.xml.ecommerce_tracker);
					mTrackers.put(trackerId, t);

		}
		return mTrackers.get(trackerId);
	}


}
