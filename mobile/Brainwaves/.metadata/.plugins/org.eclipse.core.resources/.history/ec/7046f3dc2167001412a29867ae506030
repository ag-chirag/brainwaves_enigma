package com.example.qless;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.UnknownHostException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.HttpHostConnectException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

public class SignUp extends Activity
{
	SignUpManager signUpManager = null;
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.signup);

		Bundle extras = getIntent().getExtras();
		String email="";
		String pwd="";

		if(extras!=null)
		{
			email = extras.getString("email");
			pwd = extras.getString("pwd");
		}

		if(email!="" || pwd!="")
		{
			EditText email_view = (EditText)findViewById(R.id.email_address_signup);
			EditText pwd_view = (EditText)findViewById(R.id.password_signup);

			email_view.setText(email.toCharArray(), 0, email.length());
			pwd_view.setText(pwd.toCharArray(), 0, pwd.length());
		}
	}

	public void send_signup_data(View v)
	{
		EditText email = (EditText)findViewById(R.id.email_address_signup);
		EditText pwd = (EditText)findViewById(R.id.password_signup);
		EditText name = (EditText)findViewById(R.id.name);
		String email_text = email.getText().toString();
		String pwd_text = pwd.getText().toString();

		String[] name_value = name.getText().toString().split("\\s+");
		String name_in_url = "";
		for(int i=0;i<name_value.length;i++)
		{
			name_in_url = name_in_url + name_value[i];
			if(i!=name_value.length-1)
				name_in_url = name_in_url + "+";
		}

		if((email_text.length()<=0) || (pwd_text.length()<=0) || (name_in_url.length()<=0))
		{

//			((TextView)findViewById(R.id.error)).setText("Error: All fields are mandatory!");
			return;
		}
		else
		{
			if(!validate(email_text))
			{
//				((TextView)findViewById(R.id.error)).setText("Error: Invalid email id!");
				return;    			
			}
		}


		//  	String url = "http://zootr.co//cric/api/player_profile/save/?password="+pwd_text+"&email="+email_text+"&image_url=https:%2F%2Flh3.googleusercontent.com%2F-XdUIqdMkCWA%2FAAAAAAAAAAI%2FAAAAAAAAAAA%2F4252rscbv5M%2Fphoto.jpg&name="+name_in_url;

		//  		new JSONParser().execute(url);
		if(signUpManager == null){
			signUpManager = new SignUpManager(this);
		}

		signUpManager.emailSignUpPlayerProfile(email_text, pwd_text,name_in_url, this,this);
	}


	public static final Pattern VALID_EMAIL_ADDRESS_REGEX = 
			Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE);

	public static boolean validate(String emailStr)
	{
		Matcher matcher = VALID_EMAIL_ADDRESS_REGEX .matcher(emailStr);
		return matcher.find();
	}


	private  class JSONParser extends AsyncTask<String, String, JSONObject> {

		Exception e = null;
		HttpHostConnectException h = null;
		JSONException j = null;
		UnknownHostException u = null;

		JSONObject jObject = null;
		protected void onProgressUpdate(Integer... progress) {

		}

		protected void onPostExecute(JSONObject jObject) 
		{

			if(h!=null)
			{
				try {
					throw h;
				} catch (HttpHostConnectException e) {
//					((TextView)findViewById(R.id.error)).setText("No internet connnention");
					return;
				}
			}
			else if(e!=null)
			{
				try {
					throw e;
				} catch (Exception e1) {
					// TODO Auto-generated catch block
	//				((TextView)findViewById(R.id.error)).setText("Could Not connect to the server");
					return;
				}
			}
			else if(j!=null)
			{
				try {
					throw j;
				} catch (JSONException e1) {
					// TODO Auto-generated catch block
					((TextView)findViewById(R.id.error)).setText("Could not connect to the server");
				}
				return;
			}
			else if(u!=null)
			{
				try {
					throw u;
				} catch ( UnknownHostException e) {
					// TODO Auto-generated catch block
					((TextView)findViewById(R.id.error)).setText("No internet connection");

				}

				return;
			}


			try {
				String description = jObject.getString("description");
				int error_code = jObject.getInt("error_code");

				if(error_code==2)
				{
					((TextView)findViewById(R.id.error)).setText("Invalid email id / password");
					return;
				}

			} catch (JSONException e) {
				// TODO Auto-generated catch block
				((TextView)findViewById(R.id.error)).setText("Could not connect to the server");
				return;
			}		    	 


		}

		protected JSONObject doInBackground(String... url)
		{
			InputStream inputStream = null;
			String result = null;
			try {

				DefaultHttpClient   httpclient = new DefaultHttpClient(new BasicHttpParams());
				HttpGet httpget = new HttpGet(url[0]);
				// Depends on your web service
				httpget.setHeader("Content-type", "application/json");

				HttpResponse response = httpclient.execute(httpget);   
				HttpEntity entity = response.getEntity();
				inputStream = entity.getContent();
				// json is UTF-8 by default
				BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"), 8);
				StringBuilder sb = new StringBuilder();

				String line = null;
				while ((line = reader.readLine()) != null)
				{
					sb.append(line + "\n");
				}
				result = sb.toString();
			} 
			catch(HttpHostConnectException e)
			{
				h = e;
				return jObject;
			}
			catch(UnknownHostException e)
			{
				u = e;
				return jObject;
			}
			catch (Exception e) { 
				this.e = e;
				System.out.println(e.toString());
				return jObject;
			}
			finally {
				try{if(inputStream != null)inputStream.close();}catch(Exception squish){}
			}


			try {
				jObject = new JSONObject(result);
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				j = e;
				return jObject;
			}
			return jObject;
		}


	}


	public void failSignUp(String errorDesc, int type) {
		
//		findViewById(R.id.signup_head).setVisibility(View.VISIBLE);
//		findViewById(R.id.signup_box).setVisibility(View.VISIBLE);
//		findViewById(R.id.waiting).setVisibility(View.GONE);
//		((TextView)findViewById(R.id.error)).setText(errorDesc);
	}

	@Override
	public void notifySginUp(SignUpResponseJson signUpResponseJsons) {
		// TODO Auto-generated method stub
		Log.d("zootr", "notifySginUp " + signUpResponseJsons.getId() );
		if(signUpResponseJsons.getId() > 0)
		{
			Utils.saveData("zootr_id", signUpResponseJsons.getId());
			Utils.saveData("email_name", signUpResponseJsons.getName());
			Utils.saveData("email_image", signUpResponseJsons.getImage_url());

		}


		runOnUiThread(new Runnable() {

			@Override
			public void run() {

				Utils.saveData("logged in", true);
				Intent i = new Intent(SignUp.this, DashboardActivity.class);
				startActivity(i);

			}
		});
	}	

public void onRestart()
{
	Intent intent = new Intent();
	intent.putExtra("result",-1);
	setResult(RESULT_OK, intent);
	finish();
	super.onRestart();
}	
}
